<?php

/**
 * Contener_Domain_Theme
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    ##PACKAGE##
 * @subpackage ##SUBPACKAGE##
 * @author     ##NAME## <##EMAIL##>
 * @version    SVN: $Id: Builder.php 6820 2009-11-30 17:27:49Z jwage $
 */
class Contener_Domain_Theme extends Contener_Domain_Base_Theme
{
    static function fetch($name = null)
    {
        $theme = Doctrine_Query::create()
            ->select()
            ->from('Contener_Domain_Theme t, t.Slots s');
        
        if ($name) {
            $theme->where('t.name = ?', $name);
        } else {
            $theme->where('t.is_active = ?', true);
        }
        
        return $theme->orderBy('s.lft')->fetchOne(array(), 'Contener_Database_Hydrator');
    }
    
    public function getSlotManager()
    {
        if (!isset($this->slotManager)) {
            $slots = $this->toArray();
            $slots = $slots['Slots'];
            
            $this->mapValue('slotManager', new $slots[0]['class']);
            $this->slotManager->setSerializedData($slots[0])->manage();
        }
        
        return $this->slotManager;
    }
    
    public function setSlotManager($manager) {
        $this->mapValue('slotManager', $manager);
    }
    
    public function postSave($event)
    {
        $record = $event->data;
        
        if (isset($this->slotManager)) {
            $this->saveSlots($record);
        }
    }
    
    protected function saveSlots($record = null)
    {
        if (!$record) {
            $record = $this;
        }
        
        Doctrine_Query::create()->delete()->from('Contener_Domain_Slot_Theme s')->where('s.root_id = ?', $record->id)->execute();
        
        $slots = $this->slotManager->sleep();
        
        $root = new Contener_Domain_Slot_Theme();
        $root->root_id = $record->id;
        $root->name = 'root';
        $root->class = $slots['class'];
        $root->body = $slots['body'];
        $root->save();
        
        $treeObject = Doctrine_Core::getTable('Contener_Domain_Slot_Theme')->getTree();
        $treeObject->createRoot($root, $record->id);
        
        //print_r($slots);
        
        foreach ($slots['children'] as $slot) {
            $this->saveSlot($slot, $root, $record);
        }
    }
    
    protected function saveSlot($data, $parent, $record = null)
    {
        if (!$record) {
            $record = $this;
        }
        
        $slot = new Contener_Domain_Slot_Theme();
        $slot->root_id = $record->id;
        $slot->class = $data['class'];
        $slot->name = $data['name'];
        $slot->body = $data['body'];
        
        $slot->getNode()->insertAsLastChildOf($parent);
        
        if (array_key_exists('children', $data) and is_array($data['children'])) {
            if ($data['children']) {
                foreach ($data['children'] as $child) {
                    $this->saveSlot($child, $slot);
                }
            }
        }
    }
}